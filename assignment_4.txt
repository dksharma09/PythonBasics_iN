1. What exactly is []?
>>
It is an empty list.

2. In a list of values stored in a variable called spam, how would you assign the value 'hello' as the third value? (Assume [2, 4, 6, 8, 10] are in spam.)
>>
spam.insert(2, 'hello')

(Let's pretend the spam includes the list ['a', 'b', 'c', 'd'] for the next three queries.)

3. What is the value of spam[int(int('3' * 2) / 11)]?
>>
spam[int(int('3' * 2) / 11)] = spam[int(int(33) / 11)] = spam[int(33 / 11)] = spam[3] = 'd'

4. What is the value of spam[-1]?
>>
spam[-1] = 'd'

5. What is the value of spam[:2]?
>>
['a', 'b']

(Let's pretend bacon has the list [3.14, 'cat,' 11, 'cat,' True] for the next three questions.)

6. What is the value of bacon.index('cat')?
>>
bacon.index('cat') = 1

7. How does bacon.append(99) change the look of the list value in bacon?
>>
bacon = [3.14, 'cat,' 11, 'cat,' True, 99]

8. How does bacon.remove('cat') change the look of the list in bacon?
>>
bacon = [3.14, 11, 'cat,' True, 99]

9. What are the list concatenation and list replication operators?
>>
concat operator = '+'
replication operator = '*'

10. What is difference between the list methods append() and insert()?
>>
append() adds value at the end of the list while insert() adds value at a provided index.

11. What are the two methods for removing items from a list?
>>
remove() - It helps to remove the very first given element matching from the list.
pop() - It removes an element from the list based on the index given.

12. Describe how list values and string values are identical.
>>
Both strings and lists have lengths: a string's length is the number of characters in the string; a list's length is the number of items in the list. Each character in a string as well as each item in a list has a position, also called an index.

13. What's the difference between tuples and lists?
>>
Lists are mutable while tuple is immutable.

14. How do you type a tuple value that only contains the integer 42?
>>
(42,) -- The trailing comma is mandatory.

15. How do you get a list value's tuple form? How do you get a tuple value's list form?
>>
By using built in funtions :
tuple()
list()

16. Variables that "contain" list values are not necessarily lists themselves. Instead, what do they contain?
>>
Variables will contain references to list values rather than list values themselves.

17. How do you distinguish between copy.copy() and copy.deepcopy()?
>>
copy.copy() returns a shallow copy of the list. Using the copy.deepcopy() function of the copy module can provide a real/deep clone of the object.
